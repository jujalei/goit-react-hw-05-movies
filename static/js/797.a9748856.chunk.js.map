{"version":3,"file":"static/js/797.a9748856.chunk.js","mappings":"mRAKaA,EAAa,WACxB,OAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAaF,EAAaG,IAAI,SAC9BC,GAAWC,EAAAA,EAAAA,MAEjB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WACR,GAAKX,EAAL,CAEA,IAAMY,EAAU,mCAAG,sGAEfJ,GAAa,GAFE,UAIQK,EAAAA,EAAAA,IAAcb,GAJtB,OAITc,EAJS,OAKTC,EAAOD,EAASE,QAEtBV,EAASS,GAPM,gDASfL,EAAS,KAAMO,SATA,yBAWfT,GAAa,GAXE,4EAAH,qDAehBI,GAjBuB,CAkBxB,GAAE,CAACZ,IAWJ,OACE,4BACE,kBAAMkB,SAXW,SAAAC,GACnBA,EAAMC,iBACN,IAAMC,EAAcF,EAAMG,OAAOC,SAASC,OAAOC,MAEjD1B,EAAgB,CACd2B,MAAOL,GAEV,EAIiCM,UAAU,OAAxC,WACE,kBACEA,UAAU,mBACVC,KAAK,OACLC,KAAK,SACLC,UAAQ,KAEV,mBAAQF,KAAK,SAASD,UAAU,oBAAhC,SAAoD,cAK3C,OAAVlB,IACC,yBAAG,6DAA2DA,KAE/DF,IAAa,SAAC,IAAD,KAEd,eAAIoB,UAAU,WAAd,SACGtB,EAAM0B,OAAS,GACd1B,EAAM2B,KAAI,SAAAjB,GACR,OACE,eAAkBY,UAAU,WAA5B,UACE,UAAC,KAAD,CAAMM,GAAE,kBAAalB,EAAKmB,IAAMC,MAAO,CAAEC,KAAMlC,GAA/C,WACE,gBACEmC,IAAG,6CAAwCtB,EAAKuB,aAChDC,IAAKxB,EAAKyB,MACVC,MAAO,OAET,0BAAI,IAAE1B,EAAKyB,aAPNzB,EAAKmB,GAWjB,QAIV,EAED,W,8LClFMQ,EAAW,+BACXC,EAAU,CACdC,QAAS,CACPC,cACE,6NACFC,OAAQ,qBAICC,EAAkB,mCAAG,6GAEPC,EAAAA,EAAAA,IAAA,UAClBN,EADkB,sCAErBC,GAJ4B,cAExB7B,EAFwB,yBAMvBA,EAASmC,MANc,gCAQ9BC,QAAQC,IAAR,MAR8B,yDAAH,qDAYlBC,EAAgB,mCAAG,WAAMC,GAAN,gGAELL,EAAAA,EAAAA,IAAA,UAAaN,EAAb,kBAA+BW,GAAUV,GAFpC,cAEtB7B,EAFsB,yBAGrBA,EAASmC,MAHY,gCAK5BC,QAAQC,IAAR,MAL4B,yDAAH,sDAShBG,EAAS,mCAAG,WAAMD,GAAN,gGAEEL,EAAAA,EAAAA,IAAA,UAClBN,EADkB,kBACAW,EADA,YAErBV,GAJmB,cAEf7B,EAFe,yBAMdA,EAASmC,MANK,gCAQrBC,QAAQC,IAAR,MARqB,yDAAH,sDAYTI,EAAW,mCAAG,WAAMF,GAAN,gGAEAL,EAAAA,EAAAA,IAAA,UAClBN,EADkB,kBACAW,EADA,YAErBV,GAJqB,cAEjB7B,EAFiB,yBAMhBA,EAASmC,MANO,gCAQvBC,QAAQC,IAAR,MARuB,yDAAH,sDAYXtC,EAAa,mCAAG,WAAMgB,GAAN,gGAEFmB,EAAAA,EAAAA,IAAA,UAClBN,EADkB,+BACab,GAClCc,GAJuB,cAEnB7B,EAFmB,yBAMlBA,EAASmC,MANS,gCAQzBC,QAAQC,IAAR,MARyB,yDAAH,qD","sources":["pages/MoviesPage.jsx","services/api.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { fetchFilmName } from 'services/api';\nimport { Loader } from 'components/Loader/Loader';\n\nexport const MoviesPage = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchTerm = searchParams.get('query');\n  const location = useLocation();\n\n  const [films, setFilms] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!searchTerm) return;\n\n    const fetchFilms = async () => {\n      try {\n        setIsLoading(true);\n\n        const response = await fetchFilmName(searchTerm);\n        const film = response.results;\n\n        setFilms(film);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchFilms();\n  }, [searchTerm]);\n\n  const handleSumbit = event => {\n    event.preventDefault();\n    const searchValue = event.target.children.search.value;\n\n    setSearchParams({\n      query: searchValue,\n    });\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSumbit} className=\"form\">\n        <input\n          className=\"searchForm-input\"\n          type=\"text\"\n          name=\"search\"\n          required\n        />\n        <button type=\"submit\" className=\"searchForm-button\">\n          Search\n        </button>\n      </form>\n\n      {error !== null && (\n        <p>Oops, some error occured. Please, try again later. Error: {error}</p>\n      )}\n      {isLoading && <Loader />}\n\n      <ul className=\"filmList\">\n        {films.length > 0 &&\n          films.map(film => {\n            return (\n              <li key={film.id} className=\"filmItem\">\n                <Link to={`/movies/${film.id}`} state={{ from: location }}>\n                  <img\n                    src={`https://image.tmdb.org/t/p/original${film.poster_path}`}\n                    alt={film.title}\n                    width={200}\n                  />\n                  <h3> {film.title}</h3>\n                </Link>\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n};\n\nexport default MoviesPage;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst options = {\n  headers: {\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIzODFiOTNjOWNiNzM1YjQ2YmZjNzYyYTU3YmMzMzg4OCIsInN1YiI6IjY0NzhkYTNlOWI2ZTQ3MDBhODVjOGUxMiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.hNQAuTurNSvl2yPHE81cICxQcxaFUTSxDM-jR61Com4',\n    accept: 'application/json',\n  },\n};\n\nexport const fetchTrendingToday = async () => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/trending/movie/day?language=en-US`,\n      options\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchFilmDetails = async filmId => {\n  try {\n    const response = await axios.get(`${BASE_URL}/movie/${filmId}`, options);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchCast = async filmId => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${filmId}/credits`,\n      options\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchReview = async filmId => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${filmId}/reviews`,\n      options\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchFilmName = async name => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/search/movie?query=${name}`,\n      options\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["MoviesPage","useSearchParams","searchParams","setSearchParams","searchTerm","get","location","useLocation","useState","films","setFilms","isLoading","setIsLoading","error","setError","useEffect","fetchFilms","fetchFilmName","response","film","results","message","onSubmit","event","preventDefault","searchValue","target","children","search","value","query","className","type","name","required","length","map","to","id","state","from","src","poster_path","alt","title","width","BASE_URL","options","headers","Authorization","accept","fetchTrendingToday","axios","data","console","log","fetchFilmDetails","filmId","fetchCast","fetchReview"],"sourceRoot":""}